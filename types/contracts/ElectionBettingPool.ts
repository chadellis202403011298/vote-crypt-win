/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace ElectionBettingPool {
  export type PayoutDecryptionStruct = {
    electionId: BigNumberish;
    fulfilled: boolean;
    payoutRatio: BigNumberish;
    poolScaled: BigNumberish;
    winningScaled: BigNumberish;
  };

  export type PayoutDecryptionStructOutput = [
    electionId: bigint,
    fulfilled: boolean,
    payoutRatio: bigint,
    poolScaled: bigint,
    winningScaled: bigint
  ] & {
    electionId: bigint;
    fulfilled: boolean;
    payoutRatio: bigint;
    poolScaled: bigint;
    winningScaled: bigint;
  };

  export type TicketStruct = {
    electionId: BigNumberish;
    bettor: AddressLike;
    encryptedCandidate: BytesLike;
    encryptedStake: BytesLike;
    commitment: BytesLike;
    claimed: boolean;
  };

  export type TicketStructOutput = [
    electionId: bigint,
    bettor: string,
    encryptedCandidate: string,
    encryptedStake: string,
    commitment: string,
    claimed: boolean
  ] & {
    electionId: bigint;
    bettor: string;
    encryptedCandidate: string;
    encryptedStake: string;
    commitment: string;
    claimed: boolean;
  };
}

export interface ElectionBettingPoolInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DEFAULT_ADMIN_ROLE"
      | "EDITOR_ROLE"
      | "GATEWAY_ROLE"
      | "MAX_CANDIDATES"
      | "RESULT_ORACLE_ROLE"
      | "SCALE"
      | "claim"
      | "createElection"
      | "fundPool"
      | "gatewayCallback"
      | "getElection"
      | "getPayoutDecryption"
      | "getRoleAdmin"
      | "getTicket"
      | "getTicketsForElection"
      | "grantRole"
      | "hasRole"
      | "placePrediction"
      | "protocolId"
      | "renounceRole"
      | "revokeRole"
      | "settleElection"
      | "supportsInterface"
      | "withdrawSurplus"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "DecryptionFulfilled"
      | "ElectionCreated"
      | "ElectionSettled"
      | "PredictionPaid"
      | "PredictionPlaced"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "EDITOR_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "GATEWAY_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_CANDIDATES",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "RESULT_ORACLE_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "SCALE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "claim",
    values: [BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createElection",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "fundPool", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "gatewayCallback",
    values: [BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getElection",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPayoutDecryption",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTicket",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTicketsForElection",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "placePrediction",
    values: [BigNumberish, BytesLike, BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "protocolId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "settleElection",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawSurplus",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "EDITOR_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "GATEWAY_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_CANDIDATES",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "RESULT_ORACLE_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "SCALE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createElection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fundPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "gatewayCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getElection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPayoutDecryption",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getTicket", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTicketsForElection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "placePrediction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "protocolId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "settleElection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawSurplus",
    data: BytesLike
  ): Result;
}

export namespace DecryptionFulfilledEvent {
  export type InputTuple = [requestID: BigNumberish];
  export type OutputTuple = [requestID: bigint];
  export interface OutputObject {
    requestID: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ElectionCreatedEvent {
  export type InputTuple = [
    electionId: BigNumberish,
    candidateCount: BigNumberish,
    lockTimestamp: BigNumberish
  ];
  export type OutputTuple = [
    electionId: bigint,
    candidateCount: bigint,
    lockTimestamp: bigint
  ];
  export interface OutputObject {
    electionId: bigint;
    candidateCount: bigint;
    lockTimestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ElectionSettledEvent {
  export type InputTuple = [
    electionId: BigNumberish,
    winningCandidate: BigNumberish,
    requestId: BigNumberish
  ];
  export type OutputTuple = [
    electionId: bigint,
    winningCandidate: bigint,
    requestId: bigint
  ];
  export interface OutputObject {
    electionId: bigint;
    winningCandidate: bigint;
    requestId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PredictionPaidEvent {
  export type InputTuple = [
    ticketId: BigNumberish,
    bettor: AddressLike,
    payoutWei: BigNumberish
  ];
  export type OutputTuple = [
    ticketId: bigint,
    bettor: string,
    payoutWei: bigint
  ];
  export interface OutputObject {
    ticketId: bigint;
    bettor: string;
    payoutWei: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PredictionPlacedEvent {
  export type InputTuple = [
    electionId: BigNumberish,
    bettor: AddressLike,
    ticketId: BigNumberish
  ];
  export type OutputTuple = [
    electionId: bigint,
    bettor: string,
    ticketId: bigint
  ];
  export interface OutputObject {
    electionId: bigint;
    bettor: string;
    ticketId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ElectionBettingPool extends BaseContract {
  connect(runner?: ContractRunner | null): ElectionBettingPool;
  waitForDeployment(): Promise<this>;

  interface: ElectionBettingPoolInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  EDITOR_ROLE: TypedContractMethod<[], [string], "view">;

  GATEWAY_ROLE: TypedContractMethod<[], [string], "view">;

  MAX_CANDIDATES: TypedContractMethod<[], [bigint], "view">;

  RESULT_ORACLE_ROLE: TypedContractMethod<[], [string], "view">;

  SCALE: TypedContractMethod<[], [bigint], "view">;

  claim: TypedContractMethod<
    [ticketId: BigNumberish, proofCandidate: BytesLike, proofStake: BytesLike],
    [void],
    "nonpayable"
  >;

  createElection: TypedContractMethod<
    [
      electionId: BigNumberish,
      candidateCount: BigNumberish,
      lockTimestamp: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  fundPool: TypedContractMethod<[], [void], "payable">;

  gatewayCallback: TypedContractMethod<
    [
      requestId: BigNumberish,
      cleartexts: BytesLike,
      decryptionProof: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  getElection: TypedContractMethod<
    [electionId: BigNumberish],
    [
      [
        boolean,
        bigint,
        bigint,
        boolean,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint
      ] & {
        exists: boolean;
        candidateCount: bigint;
        lockTimestamp: bigint;
        settled: boolean;
        winningCandidate: bigint;
        payoutRatio: bigint;
        totalDepositedWei: bigint;
        totalPaidWei: bigint;
        gatewayRequestId: bigint;
        winningTotalScaled: bigint;
      }
    ],
    "view"
  >;

  getPayoutDecryption: TypedContractMethod<
    [requestId: BigNumberish],
    [ElectionBettingPool.PayoutDecryptionStructOutput],
    "view"
  >;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  getTicket: TypedContractMethod<
    [ticketId: BigNumberish],
    [ElectionBettingPool.TicketStructOutput],
    "view"
  >;

  getTicketsForElection: TypedContractMethod<
    [electionId: BigNumberish],
    [bigint[]],
    "view"
  >;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  placePrediction: TypedContractMethod<
    [
      electionId: BigNumberish,
      encryptedCandidate: BytesLike,
      encryptedStake: BytesLike,
      proof: BytesLike,
      commitment: BytesLike
    ],
    [bigint],
    "payable"
  >;

  protocolId: TypedContractMethod<[], [bigint], "view">;

  renounceRole: TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  settleElection: TypedContractMethod<
    [electionId: BigNumberish, winningCandidate: BigNumberish],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  withdrawSurplus: TypedContractMethod<
    [recipient: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "EDITOR_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "GATEWAY_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "MAX_CANDIDATES"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "RESULT_ORACLE_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "SCALE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "claim"
  ): TypedContractMethod<
    [ticketId: BigNumberish, proofCandidate: BytesLike, proofStake: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createElection"
  ): TypedContractMethod<
    [
      electionId: BigNumberish,
      candidateCount: BigNumberish,
      lockTimestamp: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "fundPool"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "gatewayCallback"
  ): TypedContractMethod<
    [
      requestId: BigNumberish,
      cleartexts: BytesLike,
      decryptionProof: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getElection"
  ): TypedContractMethod<
    [electionId: BigNumberish],
    [
      [
        boolean,
        bigint,
        bigint,
        boolean,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint
      ] & {
        exists: boolean;
        candidateCount: bigint;
        lockTimestamp: bigint;
        settled: boolean;
        winningCandidate: bigint;
        payoutRatio: bigint;
        totalDepositedWei: bigint;
        totalPaidWei: bigint;
        gatewayRequestId: bigint;
        winningTotalScaled: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPayoutDecryption"
  ): TypedContractMethod<
    [requestId: BigNumberish],
    [ElectionBettingPool.PayoutDecryptionStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getTicket"
  ): TypedContractMethod<
    [ticketId: BigNumberish],
    [ElectionBettingPool.TicketStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTicketsForElection"
  ): TypedContractMethod<[electionId: BigNumberish], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "placePrediction"
  ): TypedContractMethod<
    [
      electionId: BigNumberish,
      encryptedCandidate: BytesLike,
      encryptedStake: BytesLike,
      proof: BytesLike,
      commitment: BytesLike
    ],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "protocolId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "settleElection"
  ): TypedContractMethod<
    [electionId: BigNumberish, winningCandidate: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "withdrawSurplus"
  ): TypedContractMethod<
    [recipient: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "DecryptionFulfilled"
  ): TypedContractEvent<
    DecryptionFulfilledEvent.InputTuple,
    DecryptionFulfilledEvent.OutputTuple,
    DecryptionFulfilledEvent.OutputObject
  >;
  getEvent(
    key: "ElectionCreated"
  ): TypedContractEvent<
    ElectionCreatedEvent.InputTuple,
    ElectionCreatedEvent.OutputTuple,
    ElectionCreatedEvent.OutputObject
  >;
  getEvent(
    key: "ElectionSettled"
  ): TypedContractEvent<
    ElectionSettledEvent.InputTuple,
    ElectionSettledEvent.OutputTuple,
    ElectionSettledEvent.OutputObject
  >;
  getEvent(
    key: "PredictionPaid"
  ): TypedContractEvent<
    PredictionPaidEvent.InputTuple,
    PredictionPaidEvent.OutputTuple,
    PredictionPaidEvent.OutputObject
  >;
  getEvent(
    key: "PredictionPlaced"
  ): TypedContractEvent<
    PredictionPlacedEvent.InputTuple,
    PredictionPlacedEvent.OutputTuple,
    PredictionPlacedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;

  filters: {
    "DecryptionFulfilled(uint256)": TypedContractEvent<
      DecryptionFulfilledEvent.InputTuple,
      DecryptionFulfilledEvent.OutputTuple,
      DecryptionFulfilledEvent.OutputObject
    >;
    DecryptionFulfilled: TypedContractEvent<
      DecryptionFulfilledEvent.InputTuple,
      DecryptionFulfilledEvent.OutputTuple,
      DecryptionFulfilledEvent.OutputObject
    >;

    "ElectionCreated(uint256,uint8,uint256)": TypedContractEvent<
      ElectionCreatedEvent.InputTuple,
      ElectionCreatedEvent.OutputTuple,
      ElectionCreatedEvent.OutputObject
    >;
    ElectionCreated: TypedContractEvent<
      ElectionCreatedEvent.InputTuple,
      ElectionCreatedEvent.OutputTuple,
      ElectionCreatedEvent.OutputObject
    >;

    "ElectionSettled(uint256,uint8,uint256)": TypedContractEvent<
      ElectionSettledEvent.InputTuple,
      ElectionSettledEvent.OutputTuple,
      ElectionSettledEvent.OutputObject
    >;
    ElectionSettled: TypedContractEvent<
      ElectionSettledEvent.InputTuple,
      ElectionSettledEvent.OutputTuple,
      ElectionSettledEvent.OutputObject
    >;

    "PredictionPaid(uint256,address,uint256)": TypedContractEvent<
      PredictionPaidEvent.InputTuple,
      PredictionPaidEvent.OutputTuple,
      PredictionPaidEvent.OutputObject
    >;
    PredictionPaid: TypedContractEvent<
      PredictionPaidEvent.InputTuple,
      PredictionPaidEvent.OutputTuple,
      PredictionPaidEvent.OutputObject
    >;

    "PredictionPlaced(uint256,address,uint256)": TypedContractEvent<
      PredictionPlacedEvent.InputTuple,
      PredictionPlacedEvent.OutputTuple,
      PredictionPlacedEvent.OutputObject
    >;
    PredictionPlaced: TypedContractEvent<
      PredictionPlacedEvent.InputTuple,
      PredictionPlacedEvent.OutputTuple,
      PredictionPlacedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
  };
}
